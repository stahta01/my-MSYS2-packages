# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=gcc
_mingw_suff=mingw-w64-cross
pkgname=("${_mingw_suff}-${_realname}")
pkgver=4.9.2
pkgrel=4
pkgdesc="Cross GCC for the MinGW-w64"
arch=('i686' 'x86_64')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${_mingw_suff}-toolchain" "${_mingw_suff}")
depends=("zlib" "mpc" "cloog"
         "${_mingw_suff}-binutils"
         "${_mingw_suff}-crt"
         "${_mingw_suff}-headers"
         "${_mingw_suff}-winpthreads"
         "${_mingw_suff}-windows-default-manifest")
makedepends=("gcc" 'lndir' "gmp-devel" "mpc-devel" "cloog-devel" "zlib-devel" "isl-devel")
#checkdepends=('dejagnu')
options=('!strip' 'staticlibs' '!emptydirs' '!buildflags')
source=("https://ftp.gnu.org/gnu/gcc/${_realname}-${pkgver}/${_realname}-${pkgver}.tar.bz2"
        001-4.7-ada.patch
        005-4.7-boehm-gc-cygwin.patch
        010-4.7-execstack.patch
        015-4.7-java-awt.patch
        016-4.5-java-FIONREAD.patch
        017-4.7-java-jni.patch
        018-4.8-java-soname.patch
        025-4.8-libatomic-cygwin.patch
        030-4.7-libffi-noinst.patch
        031-4.8-libffi-cygwin64.patch
        035-4.7-libitm-cygwin.patch
        040-4.8-lto-plugin-soname.patch
        045-4.8-specs-cygwin.patch
        046-4.8-__cxa_atexit.patch
        047-4.8-libstdc-atexit_thread.patch
        048-4.8-medium-model-dllimport.patch
        050-4.5-skiptest.patch
        055-4.8-gcc-ada-DTR.patch
        060-4.8-Wimplicit-decls.patch
        065-4.9-prettify-linking-no-undefined.mingw.patch
        070-4.8-filename-output.patch
        075-4.8-pr-57440.patch
        080-4.8-libstdc++export.patch
        950-4.8.0-configure-msys2.patch
        951-4.8.0-msys2-spec.patch
        952-4.8.0-libgcc-msys2.patch
        953-4.9.1-testsuite-msys2.patch
        955-4.9.2-apply-hack-so-gcc_s-isnt-stripped.patch
        1000-gcc49-isl-0.14-hack.patch)
sha256sums=('2020c98295856aa13fda0f2f3a4794490757fc24bcca918d52cc8b4917b972dd'
            '61701d909fb324fe742a11d4353a88a0f120087f26eaeedc43b4e36c31d46444'
            '9ddda0e7602eedd1efd2657132f34959242511afb05890ef0b77c34f6642e0d8'
            'f9e488190ec0615d5daba1d83504791301a2f92e539029c9b55e20cb89ca02b0'
            'f4cd8fc71b30b5bba44b30cec6cfaf8fd4855d330be4dc651c9b8f65e328af16'
            'b3ea5c1f10841282be29d481860dc8d9aea011cec04f754e3d0fbf76788bd137'
            '44386cf5564d3288940de1f9ef6079e40011c54eb93ce73d8cf96e6235bb8169'
            '2cc50c3e97a90f69d7ad7b8360883c5d219b24286dbfd6d18e3ad13ca483dcd4'
            'e65fb70ccfdd2e9ad97b46370171e86d067015760db46814916607d1ea655fe4'
            'e862e471254f7e5868ee5af56681722c58762ed9ec88c3a1f27a8cfa28adb3cc'
            '9093f49d048fe08b07c3c0e497cd9d9cc9d4cf8be9f240eb4fbce7d1036821bd'
            '69a1728e5b385003a7ce3419706f35c6bf8d41dcacb65a3f7088a589a0c48026'
            '50e3df9b5f212d77b68658e242d5081afe7efd645c977b3b00c94c1b654f02ab'
            'fa818efc38cb5d5cc39759df866b12344eb01ecf24efa2b186bb3d7e27014f7c'
            'f535d5237441e25fbfb7179e0baf2d0531c4f156d374d22151d469e063da73cb'
            'a3b9120635dcca409a9612925e8f64967ef25917811e6da4853642ee50b64745'
            '382ccb9c6b34f753d2f858ebd0efa871decb9ed4566215f32e6922e12b5665db'
            'bf68e4041d4283f0b689d7a3f8d263c3470a6c30a122bff7108a075d7e6d22e3'
            '8227a2d85203296c6d1ebbf590500f92e6388bf1af016d76e90633e4e6f9410e'
            '9a92c832ef4b57e1b466f38b3e7284e0753b3b1229edfdb644679ad32ac02f42'
            'a101c40bd4bda743ee65691959e090a2ee6e01456c394a6f45c21f9a39849d5e'
            '5b6f9b1d90073dfc8e8ada22e7663c1aa64b532315efc080591b69e176d70ef8'
            '16cb29806dd252603d3b42913eba0cb1c59c22d2a3567d88b0d1446b139e531b'
            '21191b4fd57ce5f230fcc97b4d9ae31bdc387d7c7c8e39436aa7e4268d278d3d'
            '8c0359b864f31a3f5a3e539a9263cfa3d2eed41ec9ccca91e689b39598d21c5e'
            '1e7859cb8b27bd7c57e51540cf1895e5365cec0fea2bd024402e331cc2cb599b'
            '542eca4c50a1c6a06020e006a66907d467f8cb1e32332a06ebe30f9175ca5cdc'
            '768985a00f0c148be7e19ca6d3f830e6cbe70a9e57f912a287b374e6b8b41597'
            '233f87e89b0619c0a518e61245c8dcda7b5eb6a3b212529c5bb1ece11f6e2a72'
            'ccee1d773230c8e6bd286ba3f9c9a04c7d655f84fd2a2385d2a0c3cbc60f881f')

_threads="win32"
_targets="armv7-w64-mingw32 i686-w64-mingw32 x86_64-w64-mingw32"

prepare() {
  cd ${srcdir}/${_realname}-${pkgver}

  #do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in
  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  #sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure

  #Cygwin patches

  patch -p1 -i ${srcdir}/001-4.7-ada.patch
  patch -p1 -i ${srcdir}/005-4.7-boehm-gc-cygwin.patch
  patch -p1 -i ${srcdir}/010-4.7-execstack.patch
  patch -p1 -i ${srcdir}/015-4.7-java-awt.patch
  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=35536
  patch -p1 -i ${srcdir}/016-4.5-java-FIONREAD.patch
  patch -p1 -i ${srcdir}/017-4.7-java-jni.patch
  patch -p1 -i ${srcdir}/018-4.8-java-soname.patch
  patch -p1 -i ${srcdir}/025-4.8-libatomic-cygwin.patch
  patch -p1 -i ${srcdir}/030-4.7-libffi-noinst.patch
  patch -p1 -i ${srcdir}/031-4.8-libffi-cygwin64.patch
  patch -p1 -i ${srcdir}/035-4.7-libitm-cygwin.patch
  patch -p1 -i ${srcdir}/040-4.8-lto-plugin-soname.patch
  patch -p1 -i ${srcdir}/045-4.8-specs-cygwin.patch
  patch -p1 -i ${srcdir}/046-4.8-__cxa_atexit.patch
  patch -p1 -i ${srcdir}/047-4.8-libstdc-atexit_thread.patch
  #patch -p1 -i ${srcdir}/048-4.8-medium-model-dllimport.patch
  patch -p1 -i ${srcdir}/050-4.5-skiptest.patch

  if [ "$CARCH" = "i686" ]; then
    patch -p1 -i ${srcdir}/055-4.8-gcc-ada-DTR.patch
  fi

  patch -p1 -i ${srcdir}/060-4.8-Wimplicit-decls.patch

  # Misc patches
  patch -p1 -i ${srcdir}/065-4.9-prettify-linking-no-undefined.mingw.patch
  patch -p1 -i ${srcdir}/070-4.8-filename-output.patch
  patch -p1 -i ${srcdir}/075-4.8-pr-57440.patch
  patch -p1 -i ${srcdir}/080-4.8-libstdc++export.patch

  #MSYS2 Patches
  patch -p1 -i ${srcdir}/950-4.8.0-configure-msys2.patch
  patch -p1 -i ${srcdir}/951-4.8.0-msys2-spec.patch
  patch -p1 -i ${srcdir}/952-4.8.0-libgcc-msys2.patch
  patch -p1 -i ${srcdir}/953-4.9.1-testsuite-msys2.patch
  patch -p1 -i ${srcdir}/955-4.9.2-apply-hack-so-gcc_s-isnt-stripped.patch
  
  # Compatibility with ISL-0.14.x
  patch -p0 -i ${srcdir}/1000-gcc49-isl-0.14-hack.patch
}

build() {
  for _target in ${_targets}; do
  mkdir -p ${srcdir}/gcc-build-${_target} && cd ${srcdir}/gcc-build-${_target}

  local _langs="c,lto,c++"
  case "${_target}" in
    i686*)
      local _conf="--disable-sjlj-exceptions --with-dwarf2"
      local _arch=i686
      _langs="${_langs} fortran"
    ;;

    x86_64*)
      local _arch=x86-64
      local _conf=""
      _langs="${_langs} fortran"
    ;;
  esac

  ../${_realname}-${pkgver}/configure \
    --prefix=/opt \
    --build=${CHOST} \
    --host=${CHOST} \
    --target=${_target} \
    --libexecdir=/opt/lib \
    --disable-bootstrap \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_langs} \
    --enable-shared --enable-static \
    --enable-threads=${_threads} \
    --enable-graphite \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-time=yes \
    --disable-libstdcxx-pch \
    --disable-libstdcxx-debug \
    --enable-cloog-backend=isl \
    --enable-version-specific-runtime-libs \
    --disable-cloog-version-check --disable-isl-version-check \
    --enable-lto \
    --enable-libgomp \
    --disable-multilib \
    --enable-checking=release \
    --disable-rpath \
    --disable-win32-registry \
    --disable-werror \
    --disable-symvers \
    --with-libiconv \
    --with-system-zlib \
    --with-{gmp,mpfr,mpc,isl,cloog}=/usr \
    --with-gnu-as --with-gnu-ld \
    ${_conf} \
    CFLAGS="-O2 -pipe" \
    CXXFALGS="-O2 -pipe"

  make all
  done
}

package() {
  for _target in ${_targets}; do
    cd ${srcdir}/gcc-build-${_target}
    make -j1 DESTDIR=${pkgdir} install
    mv ${pkgdir}/opt/lib/gcc/${_target}/lib/libgcc_s.a ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/
    mv ${pkgdir}/opt/lib/gcc/${_target}/libgcc*.dll ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/
    for _f in ${pkgdir}/opt/bin/*.exe; do
      strip -s ${_f}
    done
    for _f in ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/*.exe; do
      strip -s ${_f}
    done
    rm -rf ${pkgdir}/opt/share
  done
}
