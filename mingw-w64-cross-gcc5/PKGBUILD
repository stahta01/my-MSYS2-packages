# Maintainer: Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov <alexpux@gmail.com>

_mingw_suff=mingw-w64-cross
_realname=gcc

# Package build options
_make_static_gcc_only=no
_threads="win32"
_targets="i686-w64-mingw32 x86_64-w64-mingw32" #armv7-w64-mingw32 
if [[ "$_make_static_gcc_only" != "yes" ]] ; then
  _enable_gcc_lto=yes   # set to no or yes as wanted
else
  _enable_gcc_lto=no    # needs to be no when making only static GCC
fi
#_enable_ada=yes
_enable_fortran=no
#_enable_objc=no

_basegccver=5
pkgbase="${_mingw_suff}-${_realname}${_basegccver}"
pkgname=("${_mingw_suff}-${_realname}${_basegccver}")
provides=("${_mingw_suff}-${_realname}")
conflicts=("${_mingw_suff}-${_realname}")
pkgver=${_basegccver}.3.0
pkgrel=3
pkgdesc="Cross GCC for the MinGW-w64"
arch=('i686' 'x86_64')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${_mingw_suff}-toolchain" "${_mingw_suff}")
depends=("zlib" "mpc"
         "${_mingw_suff}-binutils"
         "${_mingw_suff}-headers")
if [[ "$_make_static_gcc_only" != "yes" ]] ; then
  depends+=("${_mingw_suff}-crt"
            "${_mingw_suff}-winpthreads")
fi
makedepends=("gcc" 'lndir' "gmp-devel" "mpc-devel" "zlib-devel")
#checkdepends=('dejagnu')
options=('!strip' 'staticlibs' '!emptydirs' '!buildflags')
source=("https://ftp.gnu.org/gnu/gcc/${_realname}-${pkgver}/${_realname}-${pkgver}.tar.bz2"
        001-share-mingw-fset-stack-executable-with-cygwin.patch
        002-boehm-gc-for-cygwin.patch
        003-AWT-Font-fix-for-Cygwin.patch
        004-Cygwin-ioctl-may-emit-EINVAL.patch
        005-use-avoid-version-if-not-tracking-SO-version.patch
        006-cygwin-uses-cyg-library-prefix.patch
        007-Avoid-installing-libffi.patch
        009-Cygwin-uses-sysv-ABI-on-x86_64.patch
        010-Do-not-version-lto-plugin-on-cygwin-mingw.patch
        011-add-dummy-pthread-tsaware-and-large-address-aware-fo.patch
        012-handle-dllimport-properly-in-medium-model.patch
        013-skip-test-for-cygwin-mingw.patch
        014-64bit-Cygwin-uses-SEH.patch
        015-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENABLE-for.patch
        016-fix-some-implicit-declaration-warnings.patch
        017-__cxa-atexit-for-Cygwin.patch
        018-prevent-modules-from-being-unloaded-before-their-dto.patch
        019-Cygwin-doesn-t-do-text-mode-translations-for-file-ha.patch
        020-cygwin-uses-cyg-lib-prefix.patch
        021-search-usr-lib-w32api-explicitly.patch
        022-libgomp-soname-cygwin-mingw.patch
        023-glibcxx-use-c99.patch
        024-libitm-weak-symbols.patch
        025-enable-libcilkrts.patch
        026-g++-gnu-source.patch
        027-link-w32api.patch
        100-clone_function_name_1-Retain-any-stdcall-suffix.patch
        240-prettify-linking-no-undefined.mingw.patch
        400-gcc-4.8-libstdc++export.patch
        405-dwarf-regression.patch
        410-fix-using-large-pch.patch
        420-remove-floop-unroll-and-jam.patch
        421-remove-floop-flags.patch
        422-fix-compile-without-ISL.patch
        461-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch
        950-5.2.0-configure-msys2.patch
        951-5.2.0-msys2-spec.patch
        953-5.2.0-testsuite-msys2.patch
        955-4.9.2-apply-hack-so-gcc_s-isnt-stripped.patch)
sha256sums=('b84f5592e9218b73dbae612b5253035a7b34a9a1f7688d2e1bfaaf7267d5c4db'
            'e2f984af582f15bfc3618ae9e428518a67b32749cf6de198b48e9d0534eb278a'
            '52b1725a7710040cde2d418d1374eb84dcc5cc0a0ef26c9038b17c0a811392fd'
            '6d15fe75fa6e865cde0334f89953daa76ef40c2c6d767e5880bd810470c1aac7'
            'facb6fb633cc6c8bc83af0b138798a6de8bee036be7ee1460330475ac57d63c1'
            '128b5288dd7c7aa0107ff6c0e76b3b9dfb30194f30b631c3433721220e92eace'
            'e199a6f5b6b5a018e323b75919ed9e29f2399752d9de94d166c2e8014492ba26'
            'a3a01a9a6abdd769ae5c92bd1b8522b728d475397543863db98ae8044c8792d0'
            '73f44d4343e7e9b0029373784a397f1e063e3802f56bb2dbc0dc2e4e9a3e0537'
            '4beb483671c9ee7f0149f0655433568662f0ff450d5140d14e3ef2874d0166a4'
            '7ad412357429a2e2376ec673d0e0a0d2ab4e3a162db532818bc76d55835f35d6'
            '5b33a86b8fd2ea98d8ad73dc61d6619bb9e006d5a3ddca4769cec9bca2293d32'
            '79db6a8951c3c07d9df26863a2bcfc607606211f6eb813c156b4f46123ecbbdc'
            'ac7e9e08ea8b2b4b5fdb394e217ce9081352fe07746e19b9374a753ebf89a4a2'
            '84c8127f2e70f26a6bf0f7ff1fe06df4814096bc02f5fc19291a729c740887d7'
            '4d3030238181a6d28c1aff5e5b43db6d82517f3412309175e162f5da63f7cd00'
            '0e6a373a0911d81656d9bfd2d93085b817266538600eab14965f1bafb034bac8'
            'a277245cf7ccf6e3bd83a79945ff26ea5e41fb3ecf7fe0a473b2ec64d8c5b101'
            '54a0e45c09ac70b7932cde3e86b6156c1fec459c69ece53141921adcb8a75e6e'
            '11b1b1660723dc880e034ad7e26e5e852e88e27bc6fd17c663a5fbc072c16374'
            'e0c7f71ad3ce4a060c2b2bd3c94d9352393a700173bd5a1d534044092be88daa'
            '00e528e198183799c00167cacc1a7b1cb9505ae93ef89e581632ffaae20080f2'
            'b68848b7ad50b865e6ab2118f2cf25d3d9d002fdbf251e78002df66cd7090660'
            'f748b4be4bb3b4645f07cc2fa490ba6723f2e19cb09dd9f779816850b953ae4a'
            'c1b6ff3747e2ad2f2d7b052d48c3a0ccfab58a4141f9c90d0e49a9441d25280f'
            'cbad1b7866c351f65e188bd2e8dccc2448c0ce82be01008ac081f3271d707dd9'
            'c1a0172e24ed45fba1c0bf11deb6a0301e959abd258179d07cdb378837784393'
            '37b5460cfd4635231616af8a555d376faa5b53dba1f7260ca029fc5204218af5'
            'a101c40bd4bda743ee65691959e090a2ee6e01456c394a6f45c21f9a39849d5e'
            '21191b4fd57ce5f230fcc97b4d9ae31bdc387d7c7c8e39436aa7e4268d278d3d'
            '0768864eba737cf7be59e8469d039a2246e015e40ba139cd2d20aa798c3362ef'
            '2309caff9d8683f1f2dacb830a08837b2b61b94456b11d13f99874e4862ab207'
            '3bd6dab41e26e7f75c1ef1f7b8894e025c63fb6c1e61a23bee29726175ecffcf'
            'b8b062de71734d4cf006f488fefa8b1223f236725449ac6ac32f88450916833f'
            '9c79d58fc945a80f7815149163f6dd98e9eac4aa2380beba3abb7f1b63f74d9e'
            '714e18e8e1a89c149dfabde6eb6dd0a7518590b7a911643de761b6d31c7acd2d'
            '7440974e7a3a9f07da6e1c2b26cbb49f0ec34426079d9a9c7436258695c85a84'
            '64c021dc7d32ae1b06825baff3fc646d9050c20790e4b05ccaf12eab8c4bcc12'
            '5984dcfa19906d1964367f3c8dd6be2253b88b8c172c67db3df712702836d308'
            'd033071ab49b0873fa2a1cf3ffbc2bd897ef0d94d68d1e87bc1a97efd22afaed')

# =========================================== #
# Helper macros to help make tasks easier     #
apply_patch_with_msg() {
  for _fname in "$@"
  do
    msg2 "Applying ${_fname}"
    patch -Nbp1 -i "${srcdir}"/${_fname}
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ] || [ -d $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd ${srcdir}/${_realname}-${pkgver}

  #do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in
  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  #sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure

  del_file_exists gcc/ada/system-cygwin-x86_64.ads \
    libgomp/config/cygwin/plugin-suffix.h \
    config/mt-cygwin \
    gcc/config/i386/msys.h \
    gcc/config/i386/msys-w64.h \
    gcc/config/i386/t-msys-w64 \
    libgcc/config/i386/t-msys

  # Cygwin patches
  apply_patch_with_msg \
    001-share-mingw-fset-stack-executable-with-cygwin.patch \
    002-boehm-gc-for-cygwin.patch \
    003-AWT-Font-fix-for-Cygwin.patch \
    004-Cygwin-ioctl-may-emit-EINVAL.patch \
    005-use-avoid-version-if-not-tracking-SO-version.patch \
    006-cygwin-uses-cyg-library-prefix.patch \
    007-Avoid-installing-libffi.patch \
    009-Cygwin-uses-sysv-ABI-on-x86_64.patch \
    010-Do-not-version-lto-plugin-on-cygwin-mingw.patch \
    011-add-dummy-pthread-tsaware-and-large-address-aware-fo.patch \
    012-handle-dllimport-properly-in-medium-model.patch \
    013-skip-test-for-cygwin-mingw.patch \
    014-64bit-Cygwin-uses-SEH.patch \
    015-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENABLE-for.patch \
    016-fix-some-implicit-declaration-warnings.patch \
    017-__cxa-atexit-for-Cygwin.patch \
    018-prevent-modules-from-being-unloaded-before-their-dto.patch \
    019-Cygwin-doesn-t-do-text-mode-translations-for-file-ha.patch \
    020-cygwin-uses-cyg-lib-prefix.patch \
    021-search-usr-lib-w32api-explicitly.patch \
    022-libgomp-soname-cygwin-mingw.patch \
    023-glibcxx-use-c99.patch \
    024-libitm-weak-symbols.patch \
    025-enable-libcilkrts.patch \
    026-g++-gnu-source.patch \
    027-link-w32api.patch

  # MINGW patches
  apply_patch_with_msg \
    100-clone_function_name_1-Retain-any-stdcall-suffix.patch \
    240-prettify-linking-no-undefined.mingw.patch \
    400-gcc-4.8-libstdc++export.patch \
    405-dwarf-regression.patch \
    410-fix-using-large-pch.patch
  
  # MSYS2 Patches
  apply_patch_with_msg \
    950-5.2.0-configure-msys2.patch \
    951-5.2.0-msys2-spec.patch \
    953-5.2.0-testsuite-msys2.patch \
    955-4.9.2-apply-hack-so-gcc_s-isnt-stripped.patch

  # GCC graphite Patches
  apply_patch_with_msg \
    420-remove-floop-unroll-and-jam.patch \
    421-remove-floop-flags.patch \
    422-fix-compile-without-ISL.patch

  apply_patch_with_msg \
    461-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch
}

build() {
  for _target in ${_targets}; do
  mkdir -p ${srcdir}/gcc-build-${_target} && cd ${srcdir}/gcc-build-${_target}

  case "${_target}" in
    i686*)
      local _conf="--disable-sjlj-exceptions --with-dwarf2"
      local _arch=i686
    ;;

    x86_64*)
      local _arch=x86-64
      local _conf=""
    ;;
  esac

  if [ "$_enable_gcc_lto" == "yes" ]; then
    configure_opts+=("--enable-lto")
  else
    configure_opts+=("--disable-lto")
  fi

  if [ "$_make_static_gcc_only" == "yes" ]; then
    configure_opts+=("--enable-static")
    configure_opts+=("--disable-shared")
    configure_opts+=("--disable-threads")
  else
    configure_opts+=("--enable-static")
    configure_opts+=("--enable-shared")
    configure_opts+=("--enable-threads=${_threads}")
  fi

  local _languages="c,c++"
  if [ "$_enable_gcc_lto" == "yes" ]; then
    _languages+=",lto"
  fi
  if [ "$_enable_fortran" == "yes" ]; then
    _languages+=",fortran"
  fi

#--with-pkgversion="Rev${pkgrel}, Built by MSYS2 project" \
#--with-bugurl="https://sourceforge.net/projects/msys2" \
# --with-documentation-root-url=url
# --with-changes-root-url=url

# --program-prefix=prefix
# --program-suffix=${_gcc_program_suffix}

  ../${_realname}-${pkgver}/configure \
    --prefix=/opt \
    --build=${CHOST} \
    --host=${CHOST} \
    --target=${_target} \
    --libexecdir=/opt/lib \
    --disable-bootstrap \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_languages} \
    --enable-graphite \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-time=yes \
    --disable-libstdcxx-pch \
    --disable-libstdcxx-debug \
    --enable-version-specific-runtime-libs \
    --enable-libgomp \
    --disable-multilib \
    --enable-checking=release \
    --disable-rpath \
    --disable-win32-registry \
    --disable-werror \
    --disable-symvers \
    --with-libiconv \
    --with-system-zlib \
    --without-isl \
    --with-{gmp,mpfr,mpc}=/usr \
    --with-gnu-as --with-gnu-ld \
    ${_conf} \
    "${configure_opts[@]}" \
    CFLAGS="-O2 -pipe" \
    CXXFALGS="-O2 -pipe"


  if [[ "$_make_static_gcc_only" == "yes" ]] ; then
    make all-gcc
  else
    make all
  fi
  done
}

package() {
  for _target in ${_targets}; do
    cd ${srcdir}/gcc-build-${_target}
    if [[ "$_make_static_gcc_only" == "yes" ]] ; then
      make -j1 DESTDIR=${pkgdir} install-gcc
    else
      make -j1 DESTDIR=${pkgdir} install
    fi

    if [[ "$_make_static_gcc_only" != "yes" ]] ; then
      mv ${pkgdir}/opt/lib/gcc/${_target}/lib/libgcc_s.a ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/
      mv ${pkgdir}/opt/lib/gcc/${_target}/libgcc*.dll ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/
    fi
    for _f in ${pkgdir}/opt/bin/*.exe; do
      strip -s ${_f}
    done
    for _f in ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/*.exe; do
      strip -s ${_f}
    done
    rm -rf ${pkgdir}/opt/share
  done
}
