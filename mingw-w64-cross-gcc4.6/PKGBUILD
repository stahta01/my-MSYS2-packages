# Maintainer: Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov <alexpux@gmail.com>

_mingw_suff=mingw-w64-cross
_realname=gcc

# Package build options
_targets="i686-w64-mingw32"
_make_static_gcc_only=yes
_threads="win32"
_enable_gcc_lto=yes
#_enable_ada=yes
_enable_fortran=no
#_enable_objc=no

_basegccver=4.6
pkgbase="${_mingw_suff}-${_realname}${_basegccver}"
pkgname=("${_mingw_suff}-${_realname}${_basegccver}")
provides=("${_mingw_suff}-${_realname}")
conflicts=("${_mingw_suff}-${_realname}")
pkgver=${_basegccver}.4
pkgrel=1
pkgdesc="GCC for the MinGW-w64"
arch=('i686' 'x86_64')
url="http://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${_mingw_suff}-toolchain" "${_mingw_suff}")
depends=("zlib"
         "mpc"  
         "${_mingw_suff}-binutils" 
         "${_mingw_suff}-headers")
if [[ "$_make_static_gcc_only" != "yes" ]] ; then
  depends+=("${_mingw_suff}-crt"
            "${_mingw_suff}-winpthreads")
fi
makedepends=("gcc" 'lndir')
#checkdepends=('dejagnu')
optdepends=()
replaces=()
backup=()
options=('!strip' 'staticlibs' '!emptydirs' '!buildflags')
noextract=("${_realname}-${pkgver}.tar.bz2")
source=(
    "ftp://gcc.gnu.org/pub/gcc/releases/${_realname}-${pkgver}/${_realname}-${pkgver}.tar.bz2"
    104-gcc-4.6.4-Fix-texi-docs-syntax-errors.patch
    461-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch
    942-crossconfig.m4-Add-support-for-cygwin-x64-target.patch
    950-gcc-4.6.4-configure-msys2.patch
    951-gcc-4.6-msys2-spec.patch
)
sha256sums=('35af16afa0b67af9b8eb15cafb76d2bc5f568540552522f5dc2c88dd45d977e8'
            '8a72e1b2cef99c78a9f7d8126d8509b580617fce68a289b8bcb05c98e4ffc548'
            '37194977a8c71137485fb4b7d9e0d1a6ee4dbee8658df2de47860a1a4319c944'
            'fba7508237bf8e6ae261ed6fcdbc02442241444048acef5c8e0a88d18d76c24b'
            'd32a4396ab835e6763aa73885503236cc700e53091d22788250e8ebeb260c18c'
            '2c76160d093ea5f7231a611d761719ff241e58f63dbec1e72d5d76cf29c1a7c6')

# =========================================== #
# Helper macro(s) to help make tasks easier   #
apply_patch_with_msg() {
  for _fname in "$@"
  do
    msg2 "Applying ${_fname}"
    patch -Nbp1 -i "${srcdir}"/${_fname}
  done
}

replace_file_exists() {
  for _fname in "$@"
  do
    if [[ -f "${srcdir}/${_realname}-${pkgver}/${_fname}" && -f "${startdir}/${_realname}-${pkgver}-extracted/${_fname}" ]]; then
      msg2 "Replacing ${_fname}"
      cp  "${startdir}/${_realname}-${pkgver}-extracted/${_fname}" "${srcdir}/${_realname}-${pkgver}/${_fname}"
    else
      msg2 "Skipping replacement of ${_fname}"
    fi
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [[ -f ${_fname} ]]; then
      rm -rf ${_fname}
    fi
  done
}
# =========================================== #

prepare() {
  if [ ! -d "${startdir}/${_realname}-${pkgver}-extracted" ]; then
    msg2 "Extracting archive"
    mkdir -p  "${startdir}/${_realname}-${pkgver}-extracted"
    tar --strip-components=1 -xjf ${startdir}/${_realname}-${pkgver}.tar.bz2 -C "${startdir}/${_realname}-${pkgver}-extracted"
  fi

  if [ ! -d "${srcdir}/${_realname}-${pkgver}" ]; then
    msg2 "Creating ${_realname}-${pkgver} folder and files"
    mkdir -p ${_realname}-${pkgver}
    cd ${startdir}/${_realname}-${pkgver}-extracted && \
      cp -R --target-directory="${srcdir}/${_realname}-${pkgver}" *
  else
    replace_file_exists \
      Makefile.in                 \
      boehm-gc/configure          \
      boehm-gc/configure.ac       \
      config.guess                \
      config.rpath                \
      config.sub                  \
      config/dfp.m4               \
      config/elf.m4               \
      config/lthostflags.m4       \
      config/mmap.m4              \
      config/picflag.m4           \
      config/tcl.m4               \
      configure                   \
      configure.ac                \
      fixincludes/configure       \
      fixincludes/mkfixinc.sh     \
      gcc/builtin-attrs.def       \
      gcc/c-family/c-opts.c       \
      gcc/config.build            \
      gcc/config.gcc              \
      gcc/config.host             \
      gcc/config/i386//cygming.opt              \
      gcc/config/i386//cygwin.h   \
      gcc/config/i386//mingw.opt  \
      gcc/config/i386/cygwin-stdint.h           \
      gcc/configure               \
      gcc/configure.ac            \
      gcc/cp/cfns.gperf           \
      gcc/cp/cfns.h               \
      gcc/cp/semantics.c          \
      gcc/doc/gcc.texi            \
      gcc/gtm-builtins.def        \
      libada/configure            \
      libdecnumber/configure      \
      libffi/acinclude.m4         \
      libffi/configure            \
      libffi/configure.ac         \
      libffi/src/x86/ffi.c        \
      libffi/src/x86/win64.S      \
      libgcc/config.host          \
      libgcc/config/i386/cygming-crtbegin.c     \
      libgcc/configure            \
      libgcc/gthr-posix.h         \
      libgfortran/acinclude.m4    \
      libgfortran/configure       \
      libgo/config/libtool.m4     \
      libgo/config/ltmain.sh      \
      libgo/config/ltoptions.m4   \
      libgo/configure             \
      libgomp/configure           \
      libiberty/configure         \
      libiberty/configure.ac      \
      libmudflap/configure        \
      libobjc/configure           \
      libobjc/configure.ac        \
      libquadmath/configure       \
      libssp/configure            \
      libstdc++-v3/acinclude.m4   \
      libstdc++-v3/config/abi/pre/gnu.ver       \
      libstdc++-v3/configure      \
      libstdc++-v3/configure.host \
      libstdc++-v3/crossconfig.m4 \
      libstdc++-v3/testsuite/lib/libstdc++.exp  \
      libtool.m4                  \
      ltmain.sh                   \
      lto-plugin/Makefile.am      \
      lto-plugin/Makefile.in      \
      lto-plugin/configure        \
      ltoptions.m4                \
      zlib/configure
  fi

  #msg2 "Synchronizing source directory"
  #mkdir -p "${srcdir}/${_realname}-${pkgver}"
  #time rsync --stats --itemize-changes --recursive --size-only --times \
    #"${startdir}/${_realname}-${pkgver}-extracted"/* "${srcdir}/${_realname}-${pkgver}"

  cd ${srcdir}/${_realname}-${pkgver}

  #do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in
  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  #sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure

  # del_file_exists

  # makeinfo Patches
  apply_patch_with_msg 104-gcc-4.6.4-Fix-texi-docs-syntax-errors.patch

  # GCC Backport patches
  apply_patch_with_msg 942-crossconfig.m4-Add-support-for-cygwin-x64-target.patch

  # MSYS2 Patches
  apply_patch_with_msg \
    950-gcc-4.6.4-configure-msys2.patch \
    951-gcc-4.6-msys2-spec.patch

  # Misc Patches
  apply_patch_with_msg \
    461-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch
}

build() {
  for _target in ${_targets}; do
  mkdir -p ${srcdir}/gcc-build-${_target} && cd ${srcdir}/gcc-build-${_target}
   
  local -a configure_opts
 
  case "${_target}" in
    i686*)
      local _conf="--disable-sjlj-exceptions --with-dwarf2"
      local _arch=i686
    ;;
    
    x86_64*)
      local _arch=x86-64
      local _conf=""
    ;;
  esac

  if [ "$_enable_gcc_lto" == "yes" ]; then
    configure_opts+=("--enable-lto")
  else
    configure_opts+=("--disable-lto")
  fi

  if [ "$_make_static_gcc_only" == "yes" ]; then
    configure_opts+=("--enable-static")
  else
    configure_opts+=("--enable-shared --enable-static")
  fi

  local _languages="c,c++"
  if [ "$_enable_gcc_lto" == "yes" ]; then
    _languages+=",lto"
  fi
  if [ "$_enable_fortran" == "yes" ]; then
    _languages+=",fortran"
  fi

  ../${_realname}-${pkgver}/configure \
    --prefix=/opt \
    --build=${CHOST} \
    --host=${CHOST} \
    --target=${_target} \
    --libexecdir=/opt/lib \
    --disable-bootstrap \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_languages} \
    --enable-threads=${_threads} \
    --enable-graphite \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-time=yes \
    --disable-libstdcxx-pch \
    --disable-libstdcxx-debug \
    --enable-version-specific-runtime-libs \
    --enable-lto \
    --enable-libgomp \
    --disable-multilib \
    --enable-checking=release \
    --disable-rpath \
    --disable-win32-registry \
    --disable-werror \
    --disable-symvers \
    --with-libiconv \
    --with-system-zlib \
    --without-isl \
    --with-{gmp,mpfr,mpc}=/usr \
    --with-gnu-as --with-gnu-ld \
    ${_conf} \
    "${configure_opts[@]}" \
    CFLAGS="-O2 -pipe" \
    CXXFALGS="-O2 -pipe"

  if [[ "$_make_static_gcc_only" == "yes" ]] ; then
    make all gcc
  else
    make all
  fi
  done
}

package() {
  for _target in ${_targets}; do
    cd ${srcdir}/gcc-build-${_target}
    if [[ "$_make_static_gcc_only" == "yes" ]] ; then
      make -j1 DESTDIR=${pkgdir} install gcc
    else
      make -j1 DESTDIR=${pkgdir} install
    fi
    mv ${pkgdir}/opt/lib/gcc/${_target}/lib/libgcc_s.a ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/
    mv ${pkgdir}/opt/lib/gcc/${_target}/libgcc*.dll ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/
    for _f in ${pkgdir}/opt/bin/*.exe; do
      strip -s ${_f}
    done
    for _f in ${pkgdir}/opt/lib/gcc/${_target}/${pkgver}/*.exe; do
      strip -s ${_f}
    done    
    rm -rf ${pkgdir}/opt/share
  done
}
